class InterviewApp {
    constructor() {
        this.questions = [];
        this.availableTags = [
            'golang', 'sql', 'database', 'concurrency', 'algorithms',
            'data-structures', 'net', 'linux', 'docker', 'git'
        ];
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadQuestions();
    }

    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        document.getElementById('addQuestionBtn').addEventListener('click', () => {
            this.openModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.querySelector('.close').addEventListener('click', () => {
            this.closeModal();
        });

        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        document.getElementById('questionForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.createQuestion();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        document.getElementById('questionTags').addEventListener('input', (e) => {
            this.showTagSuggestions(e.target.value);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ —Ç–µ–≥–æ–≤
        document.getElementById('questionTags').addEventListener('focus', (e) => {
            this.showTagSuggestions(e.target.value);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        window.addEventListener('click', (e) => {
            const modal = document.getElementById('questionModal');
            if (e.target === modal) {
                this.closeModal();
                this.hideTagSuggestions();
            }
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤
    showTagSuggestions(inputValue) {
        this.hideTagSuggestions();
        
        if (!inputValue.trim()) {
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
            this.renderAllAvailableTags();
            return;
        }

        const inputTags = inputValue.split(',').map(tag => tag.trim().toLowerCase());
        const currentTag = inputTags[inputTags.length - 1];
        
        if (!currentTag) {
            this.renderAllAvailableTags();
            return;
        }

        const filteredTags = this.availableTags.filter(tag => 
            tag.toLowerCase().includes(currentTag.toLowerCase()) && 
            !inputTags.includes(tag)
        );

        this.renderTagSuggestions(filteredTags, currentTag);
    }

     // –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–µ–≥–æ–≤
    hideTagSuggestions() {
        const existingSuggestions = document.getElementById('tagsSuggestions');
        if (existingSuggestions) {
            existingSuggestions.remove();
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
    renderAllAvailableTags() {
        this.hideTagSuggestions();
        
        const tagsInput = document.getElementById('questionTags');
        const suggestionsDiv = document.createElement('div');
        suggestionsDiv.id = 'tagsSuggestions';
        suggestionsDiv.className = 'tags-suggestions';
        
        suggestionsDiv.innerHTML = `
            <div class="suggestions-title">–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏:</div>
            <div class="available-tags">
                ${this.availableTags.map(tag => 
                    `<span class="available-tag tag-${tag}" onclick="interviewApp.addTagToInput('${tag}')">${tag}</span>`
                ).join('')}
            </div>
        `;
        
        tagsInput.parentNode.insertBefore(suggestionsDiv, tagsInput.nextSibling);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
    renderTagSuggestions(tags, currentTag) {
        if (tags.length === 0) return;
        
        this.hideTagSuggestions();
        
        const tagsInput = document.getElementById('questionTags');
        const suggestionsDiv = document.createElement('div');
        suggestionsDiv.id = 'tagsSuggestions';
        suggestionsDiv.className = 'tags-suggestions';
        
        suggestionsDiv.innerHTML = `
            <div class="suggestions-title">–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–≥–∏:</div>
            <div class="available-tags">
                ${tags.map(tag => 
                    `<span class="available-tag tag-${tag}" onclick="interviewApp.addTagToInput('${tag}')">${tag}</span>`
                ).join('')}
            </div>
        `;
        
        tagsInput.parentNode.insertBefore(suggestionsDiv, tagsInput.nextSibling);
    }

    // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    addTagToInput(tag) {
        const tagsInput = document.getElementById('questionTags');
        const currentTags = tagsInput.value.split(',').map(t => t.trim()).filter(t => t);
        
        // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å—Ç–∏—á–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–≥
        if (currentTags.length > 0) {
            currentTags.pop();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥
        currentTags.push(tag);
        tagsInput.value = currentTags.join(', ');
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        tagsInput.focus();
        this.hideTagSuggestions();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–Ω–æ–≤–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–≥–∞
        setTimeout(() => this.showTagSuggestions(tagsInput.value), 100);
    }

    async loadQuestions() {
        try {
            console.log('–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤...');
            const response = await fetch('/api/v1/questions');
            console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
            
            const data = await response.json();
            console.log('–ü–æ–ª—É—á–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã:', data);
            
            this.questions = data;
            this.renderQuestions();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        }
    }

    renderQuestions() {
        const container = document.getElementById('questionsList');
        container.innerHTML = '';

        this.questions.forEach(question => {
            const questionElement = this.createQuestionElement(question);
            container.appendChild(questionElement);
        });
    }

    createQuestionElement(question) {
        const div = document.createElement('div');
        div.className = 'question-item';
        
        const id = question.id;
        if (!id) {
            console.error('Question has no ID:', question);
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        const title = question.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const answer = question.answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
        const tags = question.tags || [];
            
        div.innerHTML = `
            <div class="question-header">
                <div class="question-title">${this.escapeHtml(title)}</div>
                <div class="question-actions">
                    <div class="tags">
                        ${tags.map(tag => 
                            `<span class="tag tag-${String(tag).toLowerCase()}">${this.escapeHtml(tag)}</span>`
                        ).join('')}
                    </div>
                    <button class="delete-btn" data-id="${question.ID}">üóëÔ∏è</button>
                </div>
            </div>
            <div class="question-answer">
                <div class="answer-content">${this.escapeHtml(answer)}</div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞
        div.addEventListener('click', (e) => {
            if (!e.target.classList.contains('tag')) {
                const answer = div.querySelector('.question-answer');
                answer.classList.toggle('expanded');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = div.querySelector('.delete-btn');
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            this.deleteQuestion(id);
        });

        return div;
    }

    async createQuestion() {
        const title = document.getElementById('questionTitle').value;
        const answer = document.getElementById('questionAnswer').value;
        const tags = document.getElementById('questionTags').value
            .split(',')
            .map(tag => tag.trim())
            .filter(tag => tag);

        try {
            const response = await fetch('/api/v1/questions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ title, answer, tags }),
            });

            if (response.ok) {
                this.closeModal();
                this.loadQuestions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
                document.getElementById('questionForm').reset();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞');
        }
    }

    async deleteQuestion(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?')) {
            return;
        }

        try {
            const response = await fetch(`/api/v1/questions/del/${id}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º lowercase id
                this.questions = this.questions.filter(q => q.id !== id);
                this.renderQuestions();
            } else {
                const error = await response.json();
                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${error.error}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞');
        }
    }

    openModal() {
        document.getElementById('questionModal').style.display = 'block';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => this.showTagSuggestions(''), 100);
    }

    closeModal() {
        document.getElementById('questionModal').style.display = 'none';
        this.hideTagSuggestions();
    }

    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new InterviewApp();
});